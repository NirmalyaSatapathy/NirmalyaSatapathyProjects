package com.java.asset.bal;

import java.sql.SQLException;
import java.util.List;

import com.java.asset.dao.AssetManagerDao;
import com.java.asset.model.AssetManager;
import com.java.asset.model.ReturnAsset;

public class AssetManagerBal {
AssetManagerDao assetManagerDao;

public AssetManagerDao getAssetManagerDao() {
	return assetManagerDao;
}

public void setAssetManagerDao(AssetManagerDao assetManagerDao) {
	this.assetManagerDao = assetManagerDao;
}
public String issueAssetBal(AssetManager assetManager) throws ClassNotFoundException, SQLException {
    FacesContext context = FacesContext.getCurrentInstance();

    // Basic null or empty checks - just in case
    if (assetManager.getAssetName() == null || assetManager.getAssetName().trim().isEmpty()) {
        context.addMessage("assetName", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Asset Name is required", null));
        context.validationFailed();
        return null;
    }
    if (assetManager.getEmployName() == null || assetManager.getEmployName().trim().isEmpty()) {
        context.addMessage("employName", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Employee Name is required", null));
        context.validationFailed();
        return null;
    }
    if (assetManager.getAssignedDate() == null) {
        context.addMessage("assignedDate", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Assigned Date is required", null));
        context.validationFailed();
        return null;
    }

    // Check if asset is already assigned to this user (you need to implement this method in DAO or BAL)
    boolean alreadyAssigned = assetManagerDao.isAssetAssignedToUser(assetManager.getAssetName(), assetManager.getEmployName());
    if (alreadyAssigned) {
        context.addMessage("assetName", new FacesMessage(FacesMessage.SEVERITY_ERROR, "This asset is already assigned to the user.", null));
        context.validationFailed();
        return null;
    }

    // If all validations pass, call DAO to issue asset
    return assetManagerDao.issueAsset(assetManager);
}
What you need additionally:
Implement isAssetAssignedToUser method in your DAO to check if the asset is assigned to that employee â€” this will run a query but keep it only in DAO, not in BAL.

java
Copy
Edit
public boolean isAssetAssignedToUser(String assetName, String employName) throws SQLException, ClassNotFoundException {
    Connection con = ConnectionHelper.getConnection();
    String sql = "SELECT COUNT(*) FROM AssetAssignment aa " +
                 "JOIN Asset a ON aa.AssetID = a.AssetID " +
                 "JOIN Employee e ON aa.EmployeeID = e.EmployeeID " +
                 "WHERE a.AssetName = ? AND e.Username = ? AND aa.status = 'pending'";
    PreparedStatement pstmt = con.prepareStatement(sql);
    pstmt.setString(1, assetName);
    pstmt.setString(2, employName);
    ResultSet rs = pstmt.executeQuery();
    boolean assigned = false;
    if (rs.next()) {
        assigned = rs.getInt(1) > 0;
    }
    rs.close();
    pstmt.close();
    con.close();
    return assigned;
}
public String returnAssetBal(ReturnAsset asset) throws ClassNotFoundException, SQLException
{
	return assetManagerDao.returnAsset(asset);
}
public List<AssetManager> showPendingRequestsBal() throws ClassNotFoundException, SQLException
{
	return assetManagerDao.showPendingRequests();
}
public String approveAssetBal(ReturnAsset asset) throws ClassNotFoundException, SQLException
{
	return assetManagerDao.approveAsset(asset);
}
public List<AssetManager> showAssetHistoryBal(ReturnAsset asset) throws Exception
{
	return assetManagerDao.showAssetHistory(asset);
}
}
